{"version":3,"sources":["ManagerPanel/Root.tsx","ManagerPanel/RootView.tsx","types.ts","ManagerPanel/SettingsIndex.tsx","ManagerPanel/Profile.tsx","ManagerPanel/Update.tsx","ManagerPanel/ParametersSettings.tsx","ManagerPanel/Parameters/NumberInput.tsx","actions/actionTypes.ts","reducers/index.ts","SettingsStore/index.ts","actions/index.ts","ManagerPanel/Parameters/SteamView.tsx","ManagerPanel/Parameters/Steam.tsx","ManagerPanel/Panel.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Root","connect","state","machineState","props","react","className","group1","temperature","setting","value","group2","predictGroup","steam","power","NavLink","to","getBackLink","location","pathname","split","slice","join","Setting","Profiles","key","title","Profile","map","el","Update","href","Parameters","route","ParametersSettings","React","NumberInput","this","increment","decrement","onClick","minusClickHandler","bind","plusClickHandler","ACTION_TYPES","setSetting","setMachineState","initialState","settingsState","g1TSet","g2TSet","g1TimeSet","g2TimeSet","g1AutoMode1","g2AutoMode1","g1_1TimeSet","g2_1TimeSet","rCold","gCold","bCold","aCold","rHot","gHot","bHot","aHot","rootReducer","arguments","length","undefined","action","type","newSettingsState","Object","assign","payload","settingName","settingValue","store","createStore","SteamView","settingStore","dispatch","NumberInput_NumberInput","incrementHandler","decrementHandler","Steam","Panel","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","Route","exact","path","component","SettingsIndex","App","react_default","a","createElement","BrowserRouter","Panel_Panel","Component","Boolean","window","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c3677a0.chunk.js","sourcesContent":["import {connect} from \"react-redux\";\r\nimport {RootView} from \"./RootView\";\r\n\r\n\r\nconst mapStateToProps = (state:any) => {\r\n    return {\r\n        machineState : state.machineState\r\n    }\r\n};\r\n\r\nconst Root = connect(\r\n    mapStateToProps\r\n)(RootView);\r\n\r\nexport default Root;","import {NavLink} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\n\r\nexport function RootView(props: any) {\r\n    return (\r\n        <div className='manager-panel__root panel_root'>\r\n            <div className='manager-panel__block btn-outline-dark manager-panel__topleft '>\r\n                <b>Группа 1</b><br/>\r\n                Температура: {props.machineState.group1.temperature} C / {props.machineState.group1.setting.temperature} C<br/>\r\n                Пролив: {props.machineState.group1.setting.value} ml\r\n            </div>\r\n            <div className='manager-panel__block btn-outline-dark manager-panel__topright'>\r\n                <b>Группа 1</b><br/>\r\n                Температура: {props.machineState.group2.temperature} C / {props.machineState.group2.setting.temperature} C<br/>\r\n                Пролив: {props.machineState.group2.setting.value} ml\r\n            </div>\r\n            <div className='manager-panel__block btn-outline-dark manager-panel__middleleft'>\r\n                <b>Преднагревательный</b><br/>\r\n                Температура: {props.machineState.predictGroup.temperature} C / {props.machineState.predictGroup.setting.temperature} C\r\n            </div>\r\n            <div className='manager-panel__block btn-outline-dark manager-panel__bottomleft'>\r\n                <b>Паровой</b><br />\r\n                Давление: {props.machineState.steam.power/1000} / {props.machineState.steam.setting.power/1000}\r\n            </div>\r\n            <NavLink to='manage/settings' className='manager-panel__block btn-outline-dark manager-panel__bottomright'>\r\n                Настройки\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}","export interface IGroupSetting {\r\n    temperature: number,\r\n    value: number\r\n}\r\n\r\nexport interface IGroupState {\r\n    temperature: number,\r\n    setting: IGroupSetting\r\n}\r\n\r\nexport interface IPredictGroupSetting {\r\n    temperature: number\r\n}\r\n\r\nexport interface IPredictGroupState {\r\n    temperature: number,\r\n    setting: IPredictGroupSetting\r\n}\r\n\r\nexport interface ISteamSetting {\r\n    power: number\r\n}\r\n\r\nexport interface ISteamState {\r\n    power: number,\r\n    setting: ISteamSetting\r\n}\r\n\r\nexport interface IMachineState {\r\n    group1: IGroupState,\r\n    group2: IGroupState,\r\n    predictGroup: IPredictGroupState,\r\n    steam: ISteamState\r\n}\r\n\r\nexport interface ISettingsState {\r\n    g1TSet: 94,\r\n    g2TSet: 92,\r\n    g1TimeSet: 0,\r\n    g2TimeSet: 0,\r\n    g1AutoMode1: 0,\r\n    g2AutoMode1: 0,\r\n    g1_1TimeSet: 0,\r\n    g2_1TimeSet: 0,\r\n    steam: 1000,\r\n    rCold: 0,\r\n    gCold: 0,\r\n    bCold: 16,\r\n    aCold: 16,\r\n    rHot: 16,\r\n    gHot: 0,\r\n    bHot: 0,\r\n    aHot: 16\r\n}\r\n\r\nexport interface IFullMachineState {\r\n    settingsState: ISettingsState,\r\n    machineState: IMachineState\r\n}\r\n\r\nexport function getBackLink() {\r\n    return location.pathname.split('/').slice(0, -1).join('/');\r\n}","import {NavLink} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\nimport {getBackLink} from \"../types\";\r\n\r\nexport default function Setting() {\r\n    return (\r\n        <div className='setting__root panel_root'>\r\n            <NavLink to='settings/profile' className='manager-panel__block btn-outline-dark'>\r\n                Выбор профиля\r\n            </NavLink>\r\n            <NavLink to='settings/color' className='manager-panel__block btn-outline-dark'>\r\n                Цветовая схема\r\n            </NavLink>\r\n            <NavLink to='settings/update' className='manager-panel__block btn-outline-dark'>\r\n                Обновление\r\n            </NavLink>\r\n            <NavLink to={getBackLink()} className='manager-panel__block btn-outline-success'>\r\n                Назад\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}","import {NavLink} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\nimport {getBackLink} from \"../types\";\r\n\r\nconst Profiles = [\r\n    {\r\n        key: 0,\r\n        title: 'Автоматическая'\r\n    },\r\n    {\r\n        key: 1,\r\n        title: 'Ручная'\r\n    },\r\n    {\r\n        key: 2,\r\n        title: 'Арабика'\r\n    },\r\n    {\r\n        key: 3,\r\n        title: 'Бразилия'\r\n    }\r\n]\r\n\r\nexport default function Profile() {\r\n    return (\r\n        <div className='setting__profile panel_root'>\r\n            <ul className='setting__profile-list list-group list-group-flush'>\r\n                {Profiles.map((el)=>{\r\n                    return (<li className='list-group-item' key={el.key}>{el.title}</li>)\r\n                })}\r\n            </ul>\r\n            <NavLink to='profile/hand' className='manager-panel__block btn-outline-dark'>\r\n                Настройка по параметрам\r\n            </NavLink>\r\n            <NavLink to={getBackLink()} className='manager-panel__block btn-outline-success'>\r\n                Назад\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}","import {NavLink} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\n\r\nexport default function Update(props: any) {\r\n    return (\r\n        <div className=\"asdasd\">\r\n            <div className='manager-panel__update panel_root'>\r\n                <div className=\"manager-panel__block manager-panel__left btn-outline-dark manager-panel__info\">\r\n                    <b>В процессе обновления функционал кофемашины будет недоступен.\r\n                        Обновление может занять несколько минут.\r\n                        Во время обновления нельзя отключать кофемашину от сети.</b>\r\n                </div>\r\n                <div className='manager-panel__block manager-panel__topright btn-outline-dark'>\r\n                    <a href=\"/update\">Начать процесс обновления</a>\r\n                </div>\r\n                <NavLink to='/manage/settings'\r\n                         className='manager-panel__block btn-outline-dark manager-panel__bottomright'>\r\n                    Назад\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {NavLink} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\nimport {getBackLink} from \"../types\";\r\n\r\nconst Parameters = [\r\n    {\r\n        key: 0,\r\n        title: 'Паровой бойлер',\r\n        route: 'steam'\r\n    },\r\n    {\r\n        key: 1,\r\n        title: 'Температуры группы',\r\n        route: 'steam'\r\n    },\r\n    {\r\n        key: 2,\r\n        title: 'Предсмачивания',\r\n        route: 'steam'\r\n    },\r\n    {\r\n        key: 3,\r\n        title: 'Время варки',\r\n        route: 'steam'\r\n    },\r\n    {\r\n        key: 4,\r\n        title: 'Преднагревательный бойлер',\r\n        route: 'steam'\r\n    }\r\n]\r\n\r\nexport default class ParametersSettings extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='setting__profile panel_root'>\r\n                <ul className='setting__profile-list list-group list-group-flush'>\r\n                    {Parameters.map((el) => {\r\n                        return (<li className='list-group-item' key={el.key}>\r\n                            <NavLink to={'hand/steam'}\r\n                                     className='setting__hand-listItem'>\r\n                                {el.title}\r\n                            </NavLink>\r\n                        </li>)\r\n                    })}\r\n                </ul>\r\n                <NavLink to={getBackLink()} className='manager-panel__block btn-outline-success'>\r\n                    Назад\r\n                </NavLink>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\n\r\ninterface NumberInputProps {\r\n    value: number;\r\n    increment: Function;\r\n    decrement: Function;\r\n}\r\n\r\nexport default class NumberInput extends React.Component<NumberInputProps> {\r\n    plusClickHandler() {\r\n        this.props.increment();\r\n    };\r\n    minusClickHandler() {\r\n        this.props.decrement();\r\n    };\r\n    render() {\r\n        return (\r\n            <div className='setting__input'>\r\n                <button onClick={this.minusClickHandler.bind(this)} className='btn-outline-dark setting__inputButton'>\r\n                    -\r\n                </button>\r\n                <span className='setting__inputValue'>{this.props.value}</span>\r\n                <button onClick={this.plusClickHandler.bind(this)} className='btn-outline-dark setting__inputButton'>\r\n                    +\r\n                </button>\r\n            </div>\r\n        );\r\n    };\r\n}","let ACTION_TYPES = {\r\n    setSetting: 1,\r\n    setMachineState: 2\r\n};\r\n\r\nexport default ACTION_TYPES;","import ACTION_TYPES from '../actions/actionTypes';\r\nimport {IFullMachineState, IMachineState, ISettingsState} from \"../types\";\r\n\r\nconst initialMachineState:IMachineState = {\r\n    group1: {\r\n        temperature: 95,\r\n        setting: {\r\n            temperature: 93,\r\n            value: 120\r\n        }\r\n    },\r\n    group2: {\r\n        temperature: 92,\r\n        setting: {\r\n            temperature: 92,\r\n            value: 120\r\n        }\r\n    },\r\n    predictGroup: {\r\n        temperature: 85,\r\n        setting: {\r\n            temperature: 85\r\n        }\r\n    },\r\n    steam: {\r\n        power: 1000,\r\n        setting: {\r\n            power: 1000\r\n        }\r\n    }\r\n};\r\n\r\nconst initialSettingsState:ISettingsState = {\r\n    g1TSet: 94,\r\n    g2TSet: 92,\r\n    g1TimeSet: 0,\r\n    g2TimeSet: 0,\r\n    g1AutoMode1: 0,\r\n    g2AutoMode1: 0,\r\n    g1_1TimeSet: 0,\r\n    g2_1TimeSet: 0,\r\n    steam: 1000,\r\n    rCold: 0,\r\n    gCold: 0,\r\n    bCold: 16,\r\n    aCold: 16,\r\n    rHot: 16,\r\n    gHot: 0,\r\n    bHot: 0,\r\n    aHot: 16\r\n}\r\n\r\nconst initialState = {\r\n    machineState: initialMachineState,\r\n    settingsState: initialSettingsState\r\n}\r\n\r\nfunction rootReducer(state: any = initialState, action: any) {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.setSetting:\r\n            let newSettingsState = Object.assign({}, state.settingsState);\r\n            newSettingsState[action.payload.settingName] = action.payload.settingValue;\r\n            return Object.assign({}, state, { settingsState: newSettingsState });\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nconst store = createStore(rootReducer);\r\nexport default store;","import ACTION_TYPES from './actionTypes';\r\n\r\ninterface ISetSettingAction {\r\n    settingName: string,\r\n    settingValue: number\r\n}\r\n\r\nexport function setSetting(payload:ISetSettingAction) {\r\n    return { type: ACTION_TYPES.setSetting, payload }\r\n};","import {NavLink} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\nimport {getBackLink, ISettingsState} from \"../../types\";\r\nimport NumberInput from \"./NumberInput\";\r\nimport settingStore from \"../../SettingsStore/index\";\r\nimport {setSetting} from \"../../actions/index\";\r\n\r\ninterface ISteamView {\r\n    settingsState: ISettingsState\r\n}\r\n\r\nexport default class SteamView extends React.Component<ISteamView> {\r\n    incrementHandler() {\r\n        settingStore.dispatch(setSetting({settingName: \"steam\",\r\n            settingValue: this.props.settingsState.steam + 1}));\r\n    };\r\n    decrementHandler() {\r\n        settingStore.dispatch(setSetting({settingName: \"steam\",\r\n            settingValue: this.props.settingsState.steam - 1}));\r\n    };\r\n    render() {\r\n        return (\r\n            <div className='setting__profile-parameters panel_root'>\r\n                <div className='manager-panel__block manager-panel__top'>\r\n                    <p>Давление парового бойлера</p>\r\n                    <NumberInput increment={this.incrementHandler.bind(this)} decrement={this.decrementHandler.bind(this)} value={this.props.settingsState.steam / 1000}/>\r\n                </div>\r\n                <NavLink to={getBackLink()} className='manager-panel__block manager-panel__bottom'>\r\n                    Назад\r\n                </NavLink>\r\n            </div>\r\n        );\r\n    };\r\n}","import {connect} from \"react-redux\";\r\nimport SteamView from \"./SteamView\";\r\n\r\n\r\nconst mapStateToProps = (state:any) => {\r\n    return {\r\n        settingsState : state.settingsState\r\n    }\r\n};\r\n\r\nconst Steam = connect(\r\n    mapStateToProps\r\n)(SteamView);\r\n\r\nexport default Steam;","import * as React from 'react';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './Panel.css';\r\nimport { Route } from 'react-router-dom';\r\nimport Root from './Root';\r\nimport SettingsIndex  from './SettingsIndex';\r\nimport Profile from './Profile';\r\nimport Update from './Update';\r\nimport ParametersSettings from './ParametersSettings';\r\nimport Steam from './Parameters/Steam'\r\n\r\nexport class Panel extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Route exact path='*/manage' component={Root} />\r\n                <Route exact path='*/manage/settings' component={SettingsIndex} />\r\n                <Route exact path='*/manage/settings/profile' component={Profile} />\r\n                <Route exact path='*/manage/settings/update' component={Update} />\r\n                <Route exact path='*/manage/settings/profile/hand' component={ParametersSettings} />\r\n                <Route exact path='*/manage/settings/profile/hand/steam' component={Steam} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './normalize.css';\r\nimport {Panel} from './ManagerPanel/Panel'\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Panel/>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./SettingsStore\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}